#include <iostream>
using namespace std;
#include <vector>

class UnionFriend
{
public:
	// 构造函数（用-1初始化）
	UnionFriend(int size)
		:_set(size, -1)
	{
		// 其他方式
		// _set.resize(size, -1)
		// _set.assign(size, -1)
	}

	// 求交集
	void Union(int x1, int x2)
	{
		// 先找x1、x2的根
		int root1 = FindRoot(x1);
		int root2 = FindRoot(x2);

		//比较x1和x2的根是否相等
		if (root1 != root2)
		{
			_set[root1] += _set[root2];
			_set[root2] = root1;
		}
	}

	// 求合并后集合的个数
	size_t count()
	{
		size_t count = 0;
		//统计负数的个数
		for (size_t i = 0; i < _set.size(); i++)
		{
			if (_set[i] < 0)
			{
				count++;
			}
		}
		return count;
	}

private:
	//查找根节点
	int FindRoot(int index)
	{
		while (_set[index] >= 0)
		{
			index = _set[index];
		}
		return index;
	}

private:
	//一段连续的空间
	std::vector<int> _set;
};


int friends(const int m, const int n, int r[][2])
{
	//让下标从1开始，符合题目
	UnionFriend u(m + 1);
	for (int i = 0; i < n; i++)
	{
		u.Union(r[i][0], r[i][1]);
	}
	return u.count() - 1;
}

void Test()
{
	int r[][2] = { {1,2},{2,3},{4,5} };
	cout << "朋友圈个数：" << friends(5, 3, r) << endl;
}

int main()
{
	Test();
	system("pause");
	return 0;
}
